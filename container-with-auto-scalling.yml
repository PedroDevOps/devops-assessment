AWSTemplateFormatVersion: 2010-09-09
Description: Template for auto scaling Fargate service based on basic serverless container app

# Parameters for the template
Parameters:
  VpcStack:
    Type: String
    Description: Name of VPC stack to build off of
    Default: vpc

  EcsClusterStack:
    Type: String
    Description: Name of ECS Cluster stack to build off of
    Default: ecs-cluster

  Image:
    Type: String
    Description: URI of image you would like to use
    Default: 414712314912.dkr.ecr.us-east-1.amazonaws.com/ecs-cluster-ecrrepo-o1fcz1wlrkac:latest
  
  MaxContainers:
    Type: Number
    Description: Max containers to scale to
    Default: 4

# Define the AWS resources to be created
Resources:
  # Target Group for the load balancer
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId:
        # Import VPC ID from the specified VPC stack
        Fn::ImportValue: !Sub ${VpcStack}-vpc-id

  # Listener for the Application Load Balancer
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn:
        # Import the ALB ARN from the ECS Cluster Stack
        Fn::ImportValue: !Sub ${EcsClusterStack}-alb-arn
      Port: 8080
      Protocol: HTTP
    DependsOn:
      - TargetGroup

  # Fargate service definition
  FargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        # Import the ECS Cluster name
        Fn::ImportValue: !Sub ${EcsClusterStack}-ecs-cluster
      DeploymentController:
        Type: ECS
      DesiredCount: 2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: serverless-container-api
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
          AwsvpcConfiguration:
            SecurityGroups:
              # Import the default security group from ECS Cluster Stack
              - Fn::ImportValue: !Sub ${EcsClusterStack}-default-security-group
            Subnets:
              # Import the private subnet IDs from the VPC Stack
              - Fn::ImportValue: !Sub ${VpcStack}-private-subnet-a-id
              - Fn::ImportValue: !Sub ${VpcStack}-private-subnet-b-id
      TaskDefinition: !Ref FargateServiceTaskDefinition

  # Log group for Fargate service
  FargateServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3

  # Task definition for the Fargate service
  FargateServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        -
          Name: serverless-container-api
          Essential: true
          Image: !Ref Image
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref FargateServiceLogGroup
                awslogs-stream-prefix: serverless-container-api
                awslogs-region: !Ref AWS::Region
          PortMappings:
            -
              ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
      Cpu: '256'
      ExecutionRoleArn:
        # Import the default role from ECS Cluster Stack
        Fn::ImportValue: !Sub ${EcsClusterStack}-default-role
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        -  FARGATE
      TaskRoleArn:
        # Import the default role from ECS Cluster Stack
        Fn::ImportValue: !Sub ${EcsClusterStack}-default-role

# Auto Scaling configuration
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  # Permissions for auto scaling
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                Resource: '*'

  # Scalable target for Fargate service
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 2
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join
        - '/'
        - - service
          - Fn::ImportValue: !Sub ${EcsClusterStack}-ecs-cluster
          - !GetAtt FargateService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  # Scaling policies
  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${FargateService}ScaleUpPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${FargateService}ScaleDownPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  # CloudWatch Alarms for scaling
  AlarmHighRequests:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: TRUE
      AlarmActions:
        - !Ref ScaleUpPolicy
      AlarmDescription: !Sub
        - 'Scale Up Alarm based on requests for ${FargateServiceName}'
        - FargateServiceName: !GetAtt FargateService.Name
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 2
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
      EvaluationPeriods: 3
      MetricName: RequestCountPerTarget
      Namespace: AWS/ApplicationELB
      OKActions:
        - !Ref ScaleDownPolicy
      Period: 60
      Statistic: Sum
      Threshold: 3000
      TreatMissingData: ignore
      Unit: None

  CpuUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm when ECS task CPU exceeds threshold"
      Namespace: "AWS/ECS"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "ClusterName"
          Value: 
            Fn::ImportValue: !Sub ${EcsClusterStack}-ecs-cluster
        - Name: "ServiceName"
          Value: 
            !GetAtt FargateService.Name
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 20
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlarmNotificationTopic
      OKActions:
        - !Ref AlarmNotificationTopic

  # SNS Topic for alarm notifications
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: "pedro.devops@gmail.com"
          Protocol: "email"
      TopicName: "AlarmNotificationTopic"

# Outputs to export created resources for use in other stacks or references
Outputs:
  FargateServiceName:
    Description: A reference to the created Fargate Service
    Value: !GetAtt FargateService.Name
    Export:
      Name: !Sub ${AWS::StackName}-fargate-service-name
