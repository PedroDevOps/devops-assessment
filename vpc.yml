AWSTemplateFormatVersion: 2010-09-09
Description: Basic VPC similar to the default VPC

# Define the parameters for customizing the template
Parameters:
  BasicVpcCidr:
    Type: String
    Description: Cidr of the VPC
    Default: 10.99.0.0/16

  PubSubACidr:
    Type: String
    Description: Cidr of the public subnet A
    Default: 10.99.0.0/24

  PubSubBCidr:
    Type: String
    Description: Cidr of the public subnet B
    Default: 10.99.1.0/24           

  PrivSubACidr:
    Type: String
    Description: Cidr of the private subnet A
    Default: 10.99.2.0/24

  PrivSubBCidr:
    Type: String
    Description: Cidr of the private subnet B
    Default: 10.99.3.0/24   

# Define the resources to be created
Resources:
  # VPC Resource
  BasicVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref BasicVpcCidr
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: BasicVPC

  # Public Subnet A
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PubSubACidr
      AvailabilityZone: us-east-1a
      VpcId: !Ref BasicVpc
      MapPublicIpOnLaunch: true

  # Public Subnet B
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PubSubBCidr
      AvailabilityZone: us-east-1b
      VpcId: !Ref BasicVpc
      MapPublicIpOnLaunch: true

  # Private Subnet A
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivSubACidr
      AvailabilityZone: us-east-1a
      VpcId: !Ref BasicVpc

  # Private Subnet B
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivSubBCidr
      AvailabilityZone: us-east-1b
      VpcId: !Ref BasicVpc

  # Public Route Tables
  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BasicVpc
  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BasicVpc

  # Internet Gateway for public internet access
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach the Internet Gateway to the VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref BasicVpc

  # Default route for public subnet A to Internet Gateway
  PublicDefaultRouteA:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PublicRouteTableA
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

  # Default route for public subnet B to Internet Gateway
  PublicDefaultRouteB:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PublicRouteTableB
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

  # Associate Public Subnet A with its Route Table
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTableA

  # Associate Public Subnet B with its Route Table
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTableB

  # Private Route Tables
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BasicVpc
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BasicVpc

  # NAT Gateway and Elastic IP for private subnet A
  NatA:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId:
         Fn::GetAtt: EipA.AllocationId
      SubnetId:
         Ref: PublicSubnetA
  EipA:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc

  # Route for private subnet A to NAT Gateway A
  NatRouteA:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateRouteTableA
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatA

  # NAT Gateway and Elastic IP for private subnet B
  NatB:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId:
         Fn::GetAtt: EipB.AllocationId
      SubnetId:
         Ref: PublicSubnetB
  EipB:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc

  # Route for private subnet B to NAT Gateway B
  NatRouteB:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateRouteTableB
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatB

  # Associate Private Subnet A with its Route Table
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  # Associate Private Subnet B with its Route Table
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB

# Outputs to export the created resources for use in other stacks
Outputs:
  VpcExport:
    Description: A reference to the created VPC
    Value: !Ref BasicVpc
    Export:
      Name: !Sub ${AWS::StackName}-vpc-id

  PublicSubnetAExport:
    Description: A reference to public subnet A
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-public-subnet-a-id

  PublicSubnetBExport:
    Description: A reference to public subnet B
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-public-subnet-b-id

  PrivateSubnetAExport:
    Description: A reference to private subnet A
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-private-subnet-a-id

  PrivateSubnetBExport:
    Description: A reference to private subnet B
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-private-subnet-b-id
