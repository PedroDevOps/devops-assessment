Objective:

This task is designed to evaluate your skills in deploying and securing containerized applications on AWS ECS Fargate, along with the ability to design for high availability and scalability.

Description:

Design and implement a CloudFormation template for deploying a containerized application on AWS ECS Fargate. Emphasize networking, security groups, firewall, deployment, Application Load Balancer (ALB), and high availability.

This task is designed to take approximately 8 hours to complete.

Requirements:

1.       Application Description:

·        Use a simple web application for demonstration purposes. OK

·        Containerize the application using Docker. OK

         Simple NodeJS with Hello Word running in Docker

2.       Infrastructure Components:

·        Implement AWS ECS Fargate for container orchestration. OK

·        Set up an Application Load Balancer (ALB) for routing traffic to containers. OK


3.       Networking and Security:

·        Use Amazon VPC for networking. OK

·        Implement private and public subnets for ECS Fargate and ALB. OK

·        Configure security groups to restrict traffic to and from the containers. OK

·        Implement network ACLs as needed for an additional layer of security. NOT OK

4.       High Availability:

·        Ensure high availability of the application by distributing containers across multiple Availability Zones. OK

·        Implement auto-scaling for ECS Fargate based on application load. OK

5.       Deployment:

·        Use ECS service definitions to define tasks and services. OK

·        Implement a rolling deployment strategy to minimize downtime during updates. OK

·        Parameterize the CloudFormation template to allow customization for different environments. 

6.     Monitoring and Logging:

·        Implement basic logging for the application using AWS CloudWatch Logs. OK

·        Configure CloudWatch Alarms to monitor key performance metrics. OK

Deliverables:

1.        CloudFormation Template:

·         Include all necessary AWS resources for the deployment.

·         Clearly document each resource and its purpose.

·         Parameterize aspects such as VPC CIDR, subnet configurations, container image, etc. 

2.        README Documentation:

·         Provide clear instructions on how to deploy the CloudFormation stack.

·         Include any prerequisites and steps for customization.

3.        Demonstration:

·         Deploy the CloudFormation stack in a test environment.

·         Validate the application's functionality.

·         Provide any additional notes or considerations regarding the implementation.

Submission Instructions:

·  Create a GitHub repository.

·  Submit all your code;

·  Share the link with us.

 

Please submit the task within the next 7 days.

Good luck!
